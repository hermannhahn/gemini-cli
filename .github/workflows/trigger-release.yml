name: Trigger Release
run-name: Trigger Release Workflow

on:
  pull_request:
    branches: [hermannhahn/main]
  push:
    branches: [hermannhahn/main]

jobs:
  get_package_version:
    runs-on: ubuntu-latest
    outputs:
      package_version: ${{ steps.get_package_version_step.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Get package version
        id: get_package_version_step
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

  wait_for_ci:
    runs-on: ubuntu-latest
    needs: get_package_version # Ensure version is available before proceeding
    steps:
      - name: Wait for Gemini CLI CI to complete
        uses: convictional/trigger-workflow-and-wait@v1.3.0
        with:
          workflow_file_name: 'ci.yml'
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          ref: hermannhahn/main
          github_token: ${{ secrets.GITHUB_TOKEN }}
          propagate_failure: true

  wait_for_e2e:
    runs-on: ubuntu-latest
    needs: get_package_version # Ensure version is available before proceeding
    steps:
      - name: Wait for E2E Tests to complete
        uses: convictional/trigger-workflow-and-wait@v1.3.0
        with:
          workflow_file_name: 'e2e.yml'
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          ref: hermannhahn/main
          github_token: ${{ secrets.GITHUB_TOKEN }}
          propagate_failure: true

  dispatch_release:
    runs-on: ubuntu-latest
    needs: [wait_for_ci, wait_for_e2e, get_package_version] # Add get_package_version to needs
    if: ${{ always() && needs.wait_for_ci.result == 'success' && needs.wait_for_e2e.result == 'success' }}
    steps:
      - name: Dispatch Release Workflow
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          event-type: run-release
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}", "version": "${{ needs.get_package_version.outputs.package_version }}"}'