name: Nightly Release

on:
  repository_dispatch:
    types: [run-nightly-release]

  workflow_dispatch: # Keep for manual triggering
    inputs:
      version:
        description: 'The version to release (e.g., v0.1.11). Required for manual patch releases.'
        required: false # Not required for scheduled runs
        type: string
      ref:
        description: 'The branch or ref (full git sha) to release from.'
        required: true
        type: string
        default: 'main'
      create_nightly_release:
        description: 'Auto apply the nightly release tag, input version is ignored.'
        required: false
        type: boolean
        default: false
      force_skip_tests:
        description: 'Select to skip the "Run Tests" step in testing. Prod releases should run tests'
        required: false
        type: boolean
        default: false

run-name: Nightly Release v${{ github.event.inputs.version }} (${{ github.event.inputs.ref }})

jobs:
  release:
    runs-on: ubuntu-latest
    environment:
      name: production-release
      url: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ steps.version.outputs.RELEASE_TAG }}
    if: github.repository == 'hermannhahn/gemini-cli'
    permissions:
      contents: write
      packages: write
      id-token: write
    outputs:
      RELEASE_TAG: ${{ steps.version.outputs.RELEASE_TAG }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }} # Checkout a specific commit
          fetch-depth: 0 # Required for notes generation

      - name: Set nightly
        id: vars
        run: |
          is_nightly="true"
          echo "is_nightly=${is_nightly}" >> $GITHUB_OUTPUT

      - name: Setup Node.js and npm
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org/'
          scope: '@hahnd'

      - name: Install Dependencies
        run: npm ci

      - name: Get the version
        id: version
        run: |
          VERSION_JSON=$(node scripts/get-nightly-version.js)
          echo "RELEASE_TAG=$(echo $VERSION_JSON | jq -r .releaseTag)" >> $GITHUB_OUTPUT
          echo "RELEASE_VERSION=$(echo $VERSION_JSON | jq -r .releaseVersion)" >> $GITHUB_OUTPUT
          echo "NPM_TAG=$(echo $VERSION_JSON | jq -r .npmTag)" >> $GITHUB_OUTPUT

      - name: Run Tests
        if: github.event.inputs.force_skip_tests != 'true'
        run: |
          npm run preflight
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Configure Git User
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Nightly release branch
        id: release_branch
        run: |
          BRANCH_NAME="hermannhahn/nightly-release"
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_OUTPUT

      - name: Build and Prepare Packages
        run: |
          npm run build:packages
          npm run prepare:package

      - name: Configure npm for publishing
        uses: actions/setup-node@v4 # v4
        with:
          node-version: '20'
          registry-url: 'https://wombat-dressing-room.appspot.com'
          scope: '@hahnd'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish @hahnd/gemini-cli-core
        run: npm publish --workspace=@hahnd/gemini-cli-core --tag=${{ steps.version.outputs.NPM_TAG }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Install latest core package
        if: steps.vars.outputs.is_dry_run == 'false'
        run: npm install @hahnd/gemini-cli-core@${{ steps.version.outputs.RELEASE_VERSION }} --workspace=@hahnd/geminid --save-exact

      - name: Publish @hahnd/geminid
        run: npm publish --workspace=@hahnd/geminid --tag=${{ steps.version.outputs.NPM_TAG }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release and Tag
        if: ${{ steps.vars.outputs.is_dry_run == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_BRANCH: ${{ steps.release_branch.outputs.BRANCH_NAME }}
        run: |
          gh release create ${{ steps.version.outputs.RELEASE_TAG }} \
            bundle/gemini.js \
            --target "$RELEASE_BRANCH" \
            --title "Nightly Release ${{ steps.version.outputs.RELEASE_TAG }}" \
            --generate-notes
